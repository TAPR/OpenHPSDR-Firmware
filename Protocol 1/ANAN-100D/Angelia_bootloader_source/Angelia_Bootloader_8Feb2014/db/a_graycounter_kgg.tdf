--a_graycounter CARRY_CHAIN="MANUAL" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" WIDTH=2 aclr clk_en clock q carry_chain_length=48 ignore_carry_buffers="OFF"
--VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = reg 3 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to parity1} POWER_UP_LEVEL=HIGH";

SUBDESIGN a_graycounter_kgg
( 
	aclr	:	input;
	clk_en	:	input;
	clock	:	input;
	q[1..0]	:	output;
) 
VARIABLE 
	counter2a[1..0] : dffeas;
	parity1 : dffeas
		WITH (
			power_up = "high"
		);
	cnt_en	: NODE;
	cntr_cout[1..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter2a[].clk = clock;
	counter2a[].clrn = ( (! aclr), (! aclr));
	counter2a[].d = ( (counter2a[1].q $ cntr_cout[0..0]), ((cnt_en & (counter2a[0].q $ (! parity_cout))) # ((! cnt_en) & counter2a[0].q)));
	counter2a[].ena = clk_en;
	counter2a[].sclr = sclr;
	parity1.clk = clock;
	parity1.d = ((cnt_en & (counter2a[0..0].q $ counter2a[1..1].q)) # ((! cnt_en) & parity1.q));
	parity1.ena = clk_en;
	parity1.prn = (! aclr);
	parity1.sclr = sclr;
	cnt_en = VCC;
	cntr_cout[] = ( B"0", (cnt_en & parity_cout));
	parity_cout = (((! parity1.q) $ (! updown)) & cnt_en);
	q[] = counter2a[].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
